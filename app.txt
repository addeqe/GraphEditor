import { useState, useCallback, useEffect} from 'react';
import { ReactFlow, applyNodeChanges, applyEdgeChanges, addEdge, Position, Background, Controls, NodeResizer, BackgroundVariant, MarkerType} from '@xyflow/react';
import '@xyflow/react/dist/style.css';
import ResizableNodeSelected from './components/ResizableNodeSelected';
import CustomEdge from "./components/CustomEdge"
import { axisNodes, axisEdges, initialEdges, initialNodes} from './flow/Flow.constants';
import { saveEdges, saveNodes, loadFlowFromDB, deleteNodes, deleteEdges, createNewVersion, assignVersionToAllInDB, loadVersionFromDB , getAllVersions} from './neo4j/neo4jService';
import { useFlowHandlers } from './components/useCallback';
import noLabel from './components/NoLabel';


export default function App() {

  const edgeTypes = {
    custom: CustomEdge, noLabel
  };

  const nodeTypes = {
    ResizableNodeSelected: ResizableNodeSelected
  };


  const [nrOfNodes, setNrOfNodes] = useState(0);
  const [nodes, setNodes] = useState(initialNodes);
  const [edges, setEdges] = useState(initialEdges);
  const [selectedNode, setSelectedNode] = useState(null);
  const [selectedNodeType, setSelectedNodeType] = useState("default"); 
  const [selectedEdgeColor, setSelectedEdgeColor] = useState("default"); 
  const [selectedEdgeWeight, setSelectedEdgeWeight] = useState(0); 
  const [isInputDisabled, setIsInputDisabled] = useState(true);
  const [currentVersionIndex, setCurrentVersionIndex] = useState(0);
  const [versions, setVersions] = useState([]);

  const { onNodesChange, onEdgesChange, onConnect } = useFlowHandlers(setNodes, setEdges, selectedEdgeColor, selectedEdgeWeight, isInputDisabled);

const addNode = () => {
    const newNode = {
      id: crypto.randomUUID(),
      type: selectedNodeType,
      position: { x: 0, y: 0 },
      data: { label: "Node " + (nodes.length + 1) }
    }
    setNodes([...nodes, newNode]);
  };
  const addNrOfNodes = () => {
    const newNode = [];
    for (let i = 0; i < nrOfNodes; i++) {
      newNode.push({
        id: crypto.randomUUID(),
        position: { x: 0, y: 0 },
        data: { label: "Node " + (nodes.length + i + 1) }
      });
    }
    setNodes([...nodes, ...newNode]);
  };
  const handleSelectionChange = useCallback(({nodes}) => {
  if (nodes.length > 0) {
    setSelectedNode(nodes[0]);
  } else {
    setSelectedNode(null);
  }
  }, []);
  
const changeLabel = (e) => {
  const newLabel = e.target.value;
  setNodes((nodes) =>
    nodes.map((node) =>
      node.id === selectedNode?.id
        ? { ...node, data: { ...node.data, label: newLabel } }
        : node
    )
  );
};

  const selectedX = selectedNode?.position.x;
  const selectedY = selectedNode?.position.y;
  
  const handleSave = async () => {
     const versionId = await createNewVersion();
     await saveNodes(nodes, versionId);
     await saveEdges(edges, versionId);
    await assignVersionToAllInDB(versionId);

     console.log("saved with version:", versionId);
  
     fetchVersions(); 
   };

  const handleUndo = () => {
     if (currentVersionIndex < versions.length - 1) {
       setCurrentVersionIndex(currentVersionIndex + 1);
     }
   };

   const handleRedo = () => {
     if (currentVersionIndex > 0) {
       setCurrentVersionIndex(currentVersionIndex - 1);
     }
   };
  
  const deleteEdgesOrNodes = async () =>
  {
    //databas
    const deletedNodes = nodes.filter((n) => n.selected);
    const deletedEdges = edges.filter((e) => e.selected);

    //reactflow
    const newNodes = nodes.filter((n) => !n.selected);
    const newEdges = edges.filter((e) => !e.selected);

    //databas
    await deleteNodes(deletedNodes);
    await deleteEdges(deletedEdges);

    //reactflow
    setNodes(newNodes);
    setEdges(newEdges);
}
 useEffect(() => {
    fetchVersions();
  }, []);
 useEffect(() => {
     if (versions.length === 0 || !versions[currentVersionIndex]) return;

     const loadVersion = async () => {
       const versionIdToLoad = versions[currentVersionIndex].versionId;
       const { nodes: loadedNodes, edges: loadedEdges } = await loadVersionFromDB(versionIdToLoad);
       setNodes(loadedNodes);
       setEdges(loadedEdges);
     };

     loadVersion();
 }, [currentVersionIndex, versions]);
       const fetchVersions = async () => {
       const allVersions = await getAllVersions();
       setVersions(allVersions);
       setCurrentVersionIndex(0); 
     };
  
  return (
    <>
  <label htmlFor="nodeTypes">Node Types:</label>
  <select id="nodeTypes" value={selectedNodeType} onChange={(e) => setSelectedNodeType(e.target.value)} >

  <option value="">Default</option>
  <option value="ResizableNodeSelected">Resizeable</option>
      </select> 
        <label htmlFor="edgeColor">Edge Color:</label>

  <select id="edgeColor" value={selectedEdgeColor} onChange={(e) => setSelectedEdgeColor(e.target.value)} >
  <option value="default">Default</option>
  <option value="red">Red</option>
      </select> 

    <label>Edge Weight:</label><input type="number" disabled={isInputDisabled} value={selectedEdgeWeight} onChange={(e) => setSelectedEdgeWeight(Number(e.target.value))}/>
 <button onClick={() => setIsInputDisabled(!isInputDisabled)}>
        {isInputDisabled ? "Activate" : "Deactivate"}
      </button>
       <button onClick={handleUndo} disabled={currentVersionIndex >= versions.length - 1}>Undo</button>
        <button onClick={handleRedo} disabled={currentVersionIndex === 0}>Redo</button>
      <button onClick={addNode}>Add Node</button>
      <button onClick={deleteEdgesOrNodes}>Delete Node/Edge</button>
      <label>Change Node Name:</label><input type="text" onChange={changeLabel} />
      <input type="number" min="0" value={nrOfNodes}  onChange={(e) => setNrOfNodes(Number(e.target.value))} />
      <button onClick={addNrOfNodes}>Add {nrOfNodes} Nodes</button>
      <button onClick={handleSave}>Save</button>

      <h1>(X: {selectedX}) (Y: {selectedY})</h1>

    <div style={{ width: '100vw', height: '100vh' }}>
        <ReactFlow
        nodes={[...axisNodes, ...nodes]}
        edges={[...axisEdges, ...edges]}
        nodeTypes={nodeTypes}
        edgeTypes={edgeTypes}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        onConnect={onConnect}
        fitView
        defaultViewport={{ x: window.innerWidth / 2, y: window.innerHeight / 2, zoom: 1 }}
        onSelectionChange={handleSelectionChange}
        >
      <Background 
        gap={50}
        size={1}
        color="#8888883f"
        variant={BackgroundVariant.Lines}
          />
      </ReactFlow>  
    </div>
      </>
  );
}